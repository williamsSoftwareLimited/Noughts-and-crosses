@{
    ViewBag.Title = "TEST";
}
<style>
    table, th, td {
        border: 1px solid black;
        border-collapse:collapse;
        padding:4px;
    }
</style>
<div style="position:relative; width:auto; height:420px;">
    <div style="position:absolute; left:0px;top:0px;padding:20px ">
        <table id="coordTable">
            <thead>
                <tr>
                    <td>Coords</td>
                    <td>x</td>
                    <td>y</td>
                    <td>Calc y</td>
                    <td>|&delta;y|</td>
                </tr>
            </thead>
        </table>
        <div id="equationId"></div>
    </div>
    <div>
        <svg id="leastSquaresChart" style="position:absolute; left:300px;top:0px;width:500px;height:300px;padding:20px;">
            <line x1="0" y1="0" x2="0" y2="300" style="stroke:rgb(255,0,0);stroke-width:2" />
            <line x1="0" y1="300" x2="500" y2="300" style="stroke:rgb(255,0,0);stroke-width:2" />
        </svg>
        <div style="position:absolute; left:300px;top:340px;width:auto;height:30px;padding:20px;">
            Enter points:&nbsp; x = <input type="text" id="inputX" style="width:50px" value="1" />, y = <input type="text" id="inputY" style="width:50px" />&nbsp;&nbsp;
            <input type="button" value="Add" title="Add" onclick="addXAndY();" />
            &nbsp;&nbsp;<span id="inputErrorMessage" style="color:red"></span>
        </div>
    </div>
</div>
<div>
<pre>
The least squares approximation builds a linear function based on approximate points.

Eg.
|                  X            4.1
|             X                 2.9
|        X                      2.1
|   X                           0.9
---------------------------> x
    1    2    3    4   

Where looking for a graph of the form y = mx + c
Therefore we need to solve the (many) simultaneous equations:
c +  m = 0.9
c + 2m = 2.1
c + 3m = 2.9
c + 4m = 4.1

We're going to measure the vertical distance from the imaginary straight line y = mx + c,
d<sub>i</sub> = (c + mx<sub>i</sub>) - y<sub>i</sub> , (i=1,2,3,4)
We need to minimize: d<sub>1</sub><sup>2</sup> + d<sub>2</sub><sup>2</sup> + d<sub>3</sub><sup>2</sup> + d<sub>4</sub><sup>2</sup> (the squaring is to get rid of negatives)
In the example:
d<sub>1</sub><sup>2</sup> = ((c +  m) - 0.9)<sup>2</sup>
d<sub>2</sub><sup>2</sup> = ((c + 2m) - 2.1)<sup>2</sup>
d<sub>3</sub><sup>2</sup> = ((c + 3m) - 2.9)<sup>2</sup>
d<sub>4</sub><sup>2</sup> = ((c + 4m) - 4.1)<sup>2</sup>

The final simultaneous equations look like
c*n        + m*&Sigma;(x<sub>i</sub>)     = &Sigma;(y<sub>i</sub>)
c*&Sigma;(x<sub>i</sub>) + m*&Sigma;(x<sub>i</sub><sup>2</sup>) = &Sigma;(y<sub>i</sub>*x<sub>i</sub>)
where n is the number of points, and i = 1,2,...,n

Using a = &Sigma;(x<sub>i</sub>), b = &Sigma;(x<sub>i</sub><sup>2</sup>), d = &Sigma;(y<sub>i</sub>) and e = &Sigma;(y<sub>i</sub>*x<sub>i</sub>) then,
to get a solution for m then
cn + ma  = d  (1)
ca + mb  = e  (2)

the equation (2) becomes
c = (e - mb)/a (3)
--------------
c = e/a - mb/a 

Substituting c into (1)
ne/a - nmb/a + ma = d
-nmb/a + ma = d - ne/a
m(a - nb/a) = d - ne/a
m = (d - ne/a)/(a - nb/a) (4)
-------------------------

Testing using example above,
 a = 10, b = 30, d = 10 e = 30.2, and n = 4

 m = (10 - 4*30.2/10)/(10 - 4*30/10) = -2.08/-2 = 1.04 (Correct!)

 Using (3) to get c then
 c = (30.2 - 1.04*30)/10 = -0.1 (Correct!)

 Therefore my approximate linear function is y = 1.04x - 0.1
</pre> 
</div>

@*<script type="text/javascript" src="~/Scripts/Multitree.js"></script>
<script type="text/javascript" src="~/Scripts/MultitreeTests.js"></script>*@
<script type="text/javascript" src="~/Scripts/LeastSquares.js"></script>

<script type="text/javascript">
    var _canvasHeight, _canvasWidth, _scaleX = 10, _scaleY=10, _scaleSizeX=1, _scaleSizeY=1;
    var _svgGraphics = document.getElementById('leastSquaresChart'), _colour="rgb(255,0,0)";
    var _l, _t, _c, _number=0;
    var _leastSquares = new leastSquares();
    var _equation = document.getElementById("equationId");

    // get the width and height of the canvas just-in-case I change it and then forage to change it here
    _canvasHeight = _svgGraphics.style.height.replace("px","");
    _canvasWidth = _svgGraphics.style.width.replace("px", "");
    console.log("The height is " + _canvasHeight + " and the width is " + _canvasWidth);

    //draw the scale x axis first, this could be adjustable and calculated by the input data
    for (var i = 0; i <= _canvasWidth; i = i + _canvasWidth / _scaleX) {
        _l = document.createElementNS("http://www.w3.org/2000/svg", "line");
        _t = document.createElementNS("http://www.w3.org/2000/svg", "text");
        _l.x1.baseVal.value = i;
        _l.y1.baseVal.value = 296;
        _l.x2.baseVal.value = i;
        _l.y2.baseVal.value = 304;
        _l.setAttribute("stroke-width", "1");
        _l.setAttribute("stroke", _colour);
        _svgGraphics.appendChild(_l);
        _t.textContent = ""+_number;
        _number = _number + _scaleSizeX;
        _t.setAttribute("x", i-4);
        _t.setAttribute("y", 315);
        _t.setAttribute("fill", _colour);
        _svgGraphics.appendChild(_t);
    }
    _number = _scaleY;
    for (var i = 0; i <= _canvasHeight; i = i + _canvasHeight / _scaleY) {
        _l = document.createElementNS("http://www.w3.org/2000/svg", "line");
        _t = document.createElementNS("http://www.w3.org/2000/svg", "text");
        _l.x1.baseVal.value = -4;
        _l.y1.baseVal.value = i;
        _l.x2.baseVal.value = 4;
        _l.y2.baseVal.value = i;
        _l.setAttribute("stroke-width", "1");
        _l.setAttribute("stroke", _colour);
        _svgGraphics.appendChild(_l);
        _t.textContent = "" + _number;
        _number = _number - _scaleSizeY;
        _t.setAttribute("x", -20);
        _t.setAttribute("y", i+4);
        _t.setAttribute("fill", _colour);
        _svgGraphics.appendChild(_t);
    }
    var addXAndY = function () {
        var _x = document.getElementById("inputX").value,
            _y = document.getElementById("inputY").value;
        var errorMessage = document.getElementById("inputErrorMessage"),
            coordTable = document.getElementById("coordTable");
        var _error, _calcY;

        console.log("x=" + _x + ", y=" + _y);
        // invariant x and y have to be in Real
        if (!(_x / 1) && _x!=0) {
            errorMessage.innerHTML = "x is not a number";
            return;
        }
        if (!(_y / 1) && _y!=0 ) {
            errorMessage.innerHTML = "y is not a number";
            return;
        }
        errorMessage.innerHTML = "";

        _leastSquares.addPoint(parseFloat(_x), parseFloat(_y));

        // place the circles
        _c = document.createElementNS("http://www.w3.org/2000/svg", "circle");
        _c.setAttribute("stroke-width", "1");
        _c.setAttribute("stroke", _colour);
        _c.setAttribute("cx", parseFloat(_x) * (_canvasWidth / _scaleX));
        _c.setAttribute("cy", _canvasHeight - (parseFloat(_y) * (_canvasHeight / _scaleY)));
        _c.setAttribute("r", 2);
        _svgGraphics.appendChild(_c);

        document.getElementById("inputX").value = _leastSquares.pointsList.length+1;
        document.getElementById("inputY").value = "";
        if (_leastSquares.pointsList.length < 2) {
            coordTable.innerHTML += "<tr><td>" + _leastSquares.pointsList.length + "</td><td>" + _x + "</td><td>" + _y + "</td><td>" + _y + "</td><td>0</td></tr>";
            return;
        }
        _equation.innerHTML = "y = " + _leastSquares.calcGradient().toFixed(2) + "x + " + _leastSquares.calcConstant().toFixed(2);

        // recalculate the table
        coordTable.innerHTML = "<thead><tr><td>Coords</td><td>x</td><td>y</td><td>Calc y</td><td>|&delta;y|</td></tr></thead>";
        for (var i = 0; i < _leastSquares.pointsList.length; i++) {
            _calcY = _leastSquares.gradient * _leastSquares.pointsList[i].x + _leastSquares.constant;
            _error = Math.abs(_leastSquares.pointsList[i].y - _calcY);
            coordTable.innerHTML += "<tr><td>" + i + "</td><td>" + _leastSquares.pointsList[i].x.toFixed(2) + "</td><td>" + _leastSquares.pointsList[i].y.toFixed(2) + "</td><td>" + _calcY.toFixed(2) + "</td><td>" + _error.toFixed(2) + "</td></tr>";
        }
        
        // draw the line
        // the origin is at (0,_canvasHeight)
        
        _l = document.createElementNS("http://www.w3.org/2000/svg", "line");
        _l.x1.baseVal.value = 0;
        _l.y1.baseVal.value = _canvasHeight - (_leastSquares.constant* (_canvasHeight / _scaleY));
        _l.x2.baseVal.value = _canvasWidth;
        _l.y2.baseVal.value = _canvasHeight - (_leastSquares.gradient * _scaleX + _leastSquares.constant) *(_canvasHeight / _scaleY);
        _l.setAttribute("stroke-width", "1");
        _l.setAttribute("stroke", _colour);
        _l.setAttribute("id", "leastSquareLine");
        if (document.getElementById("leastSquareLine")) _svgGraphics.removeChild(document.getElementById("leastSquareLine"));
        _svgGraphics.appendChild(_l);
    }
</script>
